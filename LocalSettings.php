<?php
# This file was automatically generated by the MediaWiki 1.44.0
# installer. If you make manual changes, please keep track in case you
# need to recreate them later.
#
# See includes/MainConfigSchema.php for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.
#
# Further documentation for configuration settings may be found at:
# https://www.mediawiki.org/wiki/Manual:Configuration_settings

# Protect against web entry
if ( !defined( 'MEDIAWIKI' ) ) {
	exit;
}

## Uncomment this to disable output compression
# $wgDisableOutputCompression = true;

$wgSitename = "gnospedia";
$wgMetaNamespace = "Gnospedia";

## The URL base path to the directory containing the wiki;
## defaults for all runtime URL paths are based off of this.
## For more information on customizing the URLs
## (like /w/index.php/Page_title to /wiki/Page_title) please see:
## https://www.mediawiki.org/wiki/Manual:Short_URL
$wgScriptPath = "";

## The protocol and server name to use in fully-qualified URLs
$wgServer = "http://localhost:8000";

## The URL path to static resources (images, scripts, etc.)
$wgResourceBasePath = $wgScriptPath;

## The URL paths to the logo.  Make sure you change this from the default,
## or else you'll overwrite your logo when you upgrade!
$wgLogos = [
	'1x' => "$wgResourceBasePath/resources/assets/change-your-logo.svg",
	'icon' => "$wgResourceBasePath/resources/assets/change-your-logo-icon.svg",
];

## UPO means: this is also a user preference option

$wgEnableEmail = true;
$wgEnableUserEmail = true; # UPO

# Image processing configuration (use GD for raster thumbs)
$wgUseImageMagick = false; // use GD for JPG/PNG/GIF
$wgImageMagickConvertCommand = null;
$wgImageMagickCommand = null;
$wgShellLocale = 'en_US.UTF-8';

# Disable ShellBox completely
$wgShellboxUrl = false;
$wgShellboxCommandPath = false;

# Use built-in shell restriction (avoid external wrapper scripts)
$wgShellRestrictionMethod = 'builtin';

# Disable IM; enable resizing via GD
$wgUseImageResize = true;
$wgGenerateThumbnailOnParse = true;

# Serve thumbnails via thumb.php (recommended for PHP built-in server)
$wgThumbnailScriptPath = $wgScriptPath . '/thumb.php';

# Set up temporary directory for ImageMagick
$wgTmpDirectory = "$IP/images/tmp";
$wgImageMagickTempDir = "$IP/images/tmp";

# Create the temp directory if it doesn't exist
if (!is_dir($wgTmpDirectory)) {
    mkdir($wgTmpDirectory, 0777, true);
    chmod($wgTmpDirectory, 0777);
}

# File repository configuration
$wgUploadDirectory = "$IP/images";
$wgUploadPath = "$wgScriptPath/images";

# Enable file uploads and image processing
$wgEnableUploads = true;
$wgUseImageMagick = true;
$wgUseImageResize = true;
$wgGenerateThumbnailOnParse = true;
$wgAllowImageMoving = true;
$wgAllowCopyUploads = true;
$wgCopyUploadsFromSpecialUpload = true;
# Increase max image area to avoid rejection of large images
$wgMaxImageArea = 1.25e8; // ~125 megapixels

# Clear any existing backends to prevent duplicates
$wgFileBackends = [];

# Configure file repository with default backend
$wgLocalFileRepo = [
    'class' => 'LocalRepo',
    'name' => 'local',
    'directory' => $wgUploadDirectory,
    'scriptDirUrl' => $wgScriptPath,
    'url' => $wgUploadPath,
    'hashLevels' => 2,
    'thumbScriptUrl' => $wgScriptPath . '/thumb.php',
    'transformVia404' => false,
    'deletedDir' => "$wgUploadDirectory/archive",
    'deletedHashLevels' => 0,
    'fileMode' => 0666,
    'directoryMode' => 0777,
];

# Set cache directory
$wgCacheDirectory = "$IP/cache";
$wgFileCacheDirectory = "$wgCacheDirectory/filecache";

# Create necessary directories if they don't exist
@mkdir($wgCacheDirectory, 0777, true);
@mkdir($wgFileCacheDirectory, 0777, true);
@mkdir($wgImageMagickTempDir, 0777, true);
@mkdir("$wgUploadDirectory/temp", 0777, true);
@mkdir("$wgUploadDirectory/thumb", 0777, true);
@mkdir("$wgUploadDirectory/tmp", 0777, true);

# Set permissions for web server
@chmod($wgCacheDirectory, 0777);
@chmod($wgFileCacheDirectory, 0777);
@chmod($wgImageMagickTempDir, 0777);
@chmod($wgUploadDirectory, 0777);
@chmod("$wgUploadDirectory/temp", 0777);
@chmod("$wgUploadDirectory/thumb", 0777);
@chmod("$wgUploadDirectory/tmp", 0777);

// Duplicate backend config removed; using single $wgLocalFileRepo above

# Enable file uploads
$wgEnableUploads = true;
$wgUseImageMagick = true;
$wgUseImageResize = true;

# Set file types that can be uploaded
$wgFileExtensions = [
    'png', 'gif', 'jpg', 'jpeg', 'svg',
    'pdf', 'ppt', 'pptx', 'xls', 'xlsx', 'doc', 'docx',
    'odt', 'odp', 'ods', 'odg', 'odc', 'odf', 'odb', 'odm',
    'mp3', 'ogg', 'wav', 'mpg', 'm4a', 'oga', 'webm', 'ogv', 'mp4', 'm4v',
];

# Set maximum upload size to 100MB
$wgMaxUploadSize = 1024 * 1024 * 100;

# SVG Converter settings
$wgSVGConverter = 'ImageMagick';
// Use Linux default paths; ensure ImageMagick is installed (package: imagemagick)
$wgImageMagickConvertCommand = '/usr/bin/convert';
// Clear any macOS-specific custom converters
unset( $wgSVGConverters );
$wgSVGMaxSize = 2048;

$wgEmergencyContact = "";
$wgPasswordSender = "";

$wgEnotifUserTalk = false; # UPO
$wgEnotifWatchlist = false; # UPO
$wgEmailAuthentication = true;

## Database settings (MariaDB/MySQL)
$wgDBtype = 'mysql';
$wgDBserver = '127.0.0.1';
$wgDBname = 'wikidb';
$wgDBuser = 'wikiuser';
$wgDBpassword = 'StrongPassword123!';
// Optional: table prefix if you share the DB
// $wgDBprefix = '';
// Use default object cache and job queue (DB-backed) for MySQL


# Shared database table
# This has no effect unless $wgSharedDB is also set.
$wgSharedTables[] = "actor";

## Shared memory settings
$wgMainCacheType = CACHE_NONE;
$wgParserCacheType = CACHE_NONE;
$wgMessageCacheType = CACHE_NONE;
$wgMemCachedServers = [];

## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads = true;
$wgImportSources = [ "en.wikipedia.org" ];
$wgGroupPermissions['*']['import'] = true;
$wgGroupPermissions['*']['importupload'] = true;
$wgGroupPermissions['user']['importupload'] = true;
$wgMaxUploadSize = 1024 * 1024 * 200; // 200MB
$wgFileExtensions = array_merge($wgFileExtensions, ['xml', 'zip', '7z', 'pdf']);

// Allow sysops to edit interface CSS
$wgGroupPermissions['sysop']['editinterface'] = true;
$wgGroupPermissions['sysop']['editsitecss'] = true;
$wgGroupPermissions['sysop']['editsitejs'] = true;

$wgImportSources = [
    'wikipedia',  // allow import from English Wikipedia
    'mediawiki',  // allow import from MediaWiki.org
];
$wgEnableImport = true;  // enable import in Special:Import

// Enable ImageMagick (direct binary, no wrapper script)
$wgUseImageMagick = true;
$wgImageMagickConvertCommand = '/usr/bin/convert';

// Set the PATH environment variable for shell commands (Linux typical paths)
putenv('PATH=' . getenv('PATH') . ':/usr/local/bin:/usr/bin');

# InstantCommons allows wiki to use images from https://commons.wikimedia.org
$wgUseInstantCommons = false;

# Temporary debug logging (disable after troubleshooting)
$wgShowExceptionDetails = true;
$wgDebugLogFile = '/tmp/mw-debug.log';
$wgDebugComments = true;

# Periodically send a pingback to https://www.mediawiki.org/ with basic data
# about this MediaWiki instance. The Wikimedia Foundation shares this data
# with MediaWiki developers to help guide future development efforts.
$wgPingback = false;

# Site language code, should be one of the list in ./includes/languages/data/Names.php
$wgLanguageCode = "en";

# Time zone
$wgLocaltimezone = "UTC";

## Set $wgCacheDirectory to a writable directory on the web server
## to make your wiki go slightly faster. The directory should not
## be publicly accessible from the web.
#$wgCacheDirectory = "$IP/cache";

$wgSecretKey = "090488ac8523ef7b8dcbe9483cd44a5cf468b86f24b97cdbd9d0febbe013962e";

# Changing this will log out all existing sessions.
$wgAuthenticationTokenVersion = "1";

# Site upgrade key. Must be set to a string (default provided) to turn on the
# web installer while LocalSettings.php is in place
$wgUpgradeKey = "0bffe0449a5a067d";

## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl = "";
$wgRightsText = "";
$wgRightsIcon = "";

# Path to the GNU diff3 utility. Used for conflict resolution.
$wgDiff3 = "";

## Default skin: you can change the default skin. Use the internal symbolic
## names, e.g. 'vector' or 'monobook':
$wgDefaultSkin = "vector-2022";
$wgFileExtensions = [ 'png', 'gif', 'jpg', 'jpeg', 'svg', 'pdf' ];

# Enabled skins.
# The following skins were automatically enabled:
wfLoadSkin( 'MinervaNeue' );
wfLoadSkin( 'MonoBook' );
wfLoadSkin( 'Timeless' );
wfLoadSkin( 'Vector' );

// Load extensions only if present to avoid fatal errors during deployment
$__extensionsToLoad = [
    'ParserFunctions',
    'Cite',
    'TemplateData',
    'WikiEditor',
    'GeoData',
    'VisualEditor',
    'TitleBlacklist',
    'Scribunto',
    'TemplateStyles',
];
// foreach ( $__extensionsToLoad as $__ext ) {
//     if ( is_readable( "$IP/extensions/$__ext/extension.json" ) ) {
//         wfLoadExtension( $__ext );
//     }
// }
// wfLoadExtension( 'WikibaseRepository' );
// wfLoadExtension( 'WikibaseClient' );

// (Loaded via guarded loader above)

// Set the default engine to LuaStandalone
$wgScribuntoDefaultEngine = 'luastandalone';

// Configure LuaStandalone engine with LuaJIT
$wgScribuntoEngineConf['luastandalone'] = [
    'class' => 'MediaWiki\Extension\Scribunto\Engines\LuaStandalone\LuaStandaloneEngine',
    'luaPath' => '/usr/bin/luajit',
    'memoryLimit' => 500000000,  // 500MB
    'cpuLimit' => 30,           // 30 seconds
    'maxLangCacheSize' => 30,   // Maximum number of compiled scripts to cache
    'enableDebug' => true,      // Enable debug mode for better error messages
];

// Fallback to Lua 5.1 if LuaJIT is not available
if ( !is_executable( '/usr/bin/luajit' ) && is_executable( '/usr/bin/lua5.1' ) ) {
    $wgScribuntoEngineConf['luastandalone']['luaPath'] = '/usr/bin/lua5.1';
}

// Enable GeSHi syntax highlighting
$wgScribuntoUseGeSHi = true;

// Enable the code editor
$wgScribuntoUseCodeEditor = true;

// Increase memory limits for Lua execution
ini_set('memory_limit', '512M');

// Enable debug logging
// Enable debug logging for Scribunto
$wgDebugLogGroups['Scribunto'] = '/tmp/mw-scribunto-debug.log';
$wgDebugLogFile = '/tmp/mw-debug.log';

# Enable debug logging
$wgDebugLogFile = '/tmp/mw-debug.log';
$wgShowExceptionDetails = true;
$wgShowDBErrorBacktrace = true;
$wgShowSQLErrors = true;
$wgDebugDumpSql = true;
$wgDebugLogGroups = [
    'exception' => '/tmp/mw-exception.log',
    'error' => '/tmp/mw-error.log',
    'Scribunto' => '/tmp/mw-scribunto.log',
];

# End of automatically generated settings.
# Add more configuration options below.

