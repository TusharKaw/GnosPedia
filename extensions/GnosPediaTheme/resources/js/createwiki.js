/* GnosPedia Create Wiki JavaScript */

(function() {
    'use strict';
    
    let selectedCategory = null;
    
    function initializeCreateWiki() {
        setupCategorySelection();
        setupFormValidation();
        setupSubdomainGeneration();
    }
    
    function setupCategorySelection() {
        const categoryCards = document.querySelectorAll('.gnospedia-category-card');
        const createForm = document.getElementById('create-form');
        const categoryInput = document.getElementById('selected-category');
        
        categoryCards.forEach(card => {
            card.addEventListener('click', function() {
                // Remove selection from other cards
                categoryCards.forEach(c => c.classList.remove('selected'));
                
                // Select this card
                this.classList.add('selected');
                selectedCategory = this.dataset.category;
                categoryInput.value = selectedCategory;
                
                // Show create form with animation
                createForm.classList.add('show');
                createForm.scrollIntoView({ behavior: 'smooth' });
                
                // Enable create button if form is valid
                validateForm();
                
                // Add sparkle effect
                addSparkleEffect(this);
            });
        });
    }
    
    function setupFormValidation() {
        const wikiNameInput = document.getElementById('wiki-name');
        const subdomainInput = document.getElementById('wiki-subdomain');
        const createButton = document.getElementById('create-button');
        
        [wikiNameInput, subdomainInput].forEach(input => {
            input.addEventListener('input', validateForm);
            input.addEventListener('blur', validateForm);
        });
        
        // Real-time subdomain validation
        subdomainInput.addEventListener('input', function() {
            this.value = this.value.toLowerCase().replace(/[^a-z0-9-]/g, '');
            checkSubdomainAvailability(this.value);
        });
    }
    
    function setupSubdomainGeneration() {
        const wikiNameInput = document.getElementById('wiki-name');
        const subdomainInput = document.getElementById('wiki-subdomain');
        
        wikiNameInput.addEventListener('input', function() {
            if (!subdomainInput.value || subdomainInput.dataset.autoGenerated === 'true') {
                const suggested = generateSubdomainFromName(this.value);
                subdomainInput.value = suggested;
                subdomainInput.dataset.autoGenerated = 'true';
                checkSubdomainAvailability(suggested);
            }
        });
        
        subdomainInput.addEventListener('input', function() {
            this.dataset.autoGenerated = 'false';
        });
    }
    
    function generateSubdomainFromName(name) {
        return name
            .toLowerCase()
            .replace(/[^a-z0-9\s-]/g, '')
            .replace(/\s+/g, '-')
            .replace(/-+/g, '-')
            .replace(/^-|-$/g, '')
            .substring(0, 30);
    }
    
    function validateForm() {
        const wikiName = document.getElementById('wiki-name').value.trim();
        const subdomain = document.getElementById('wiki-subdomain').value.trim();
        const createButton = document.getElementById('create-button');
        
        const isValid = wikiName.length >= 3 && 
                       subdomain.length >= 3 && 
                       selectedCategory && 
                       /^[a-z0-9-]+$/.test(subdomain);
        
        createButton.disabled = !isValid;
        
        if (isValid) {
            createButton.textContent = 'Create My Wiki';
            createButton.classList.remove('loading');
        }
    }
    
    function checkSubdomainAvailability(subdomain) {
        if (!subdomain || subdomain.length < 3) return;
        
        const indicator = getOrCreateAvailabilityIndicator();
        indicator.textContent = 'Checking availability...';
        indicator.className = 'availability-indicator checking';
        
        // Simulate API call (in real implementation, this would be an AJAX request)
        setTimeout(() => {
            const isAvailable = !['admin', 'api', 'www', 'mail', 'ftp'].includes(subdomain);
            
            if (isAvailable) {
                indicator.textContent = '✓ Available';
                indicator.className = 'availability-indicator available';
            } else {
                indicator.textContent = '✗ Not available';
                indicator.className = 'availability-indicator unavailable';
            }
        }, 500);
    }
    
    function getOrCreateAvailabilityIndicator() {
        let indicator = document.querySelector('.availability-indicator');
        if (!indicator) {
            indicator = document.createElement('div');
            indicator.className = 'availability-indicator';
            
            const subdomainGroup = document.querySelector('.subdomain-input').parentNode;
            subdomainGroup.appendChild(indicator);
            
            // Add CSS for indicator
            const style = document.createElement('style');
            style.textContent = `
                .availability-indicator {
                    font-size: 0.9em;
                    margin-top: 0.5em;
                    font-weight: 500;
                    transition: all 0.3s ease;
                }
                .availability-indicator.checking {
                    color: #6c757d;
                }
                .availability-indicator.available {
                    color: #28a745;
                }
                .availability-indicator.unavailable {
                    color: #dc3545;
                }
            `;
            document.head.appendChild(style);
        }
        return indicator;
    }
    
    function addSparkleEffect(element) {
        const sparkles = document.createElement('div');
        sparkles.className = 'sparkles';
        element.appendChild(sparkles);
        
        for (let i = 0; i < 6; i++) {
            const sparkle = document.createElement('div');
            sparkle.className = 'sparkle';
            sparkle.style.left = Math.random() * 100 + '%';
            sparkle.style.top = Math.random() * 100 + '%';
            sparkle.style.animationDelay = Math.random() * 0.5 + 's';
            sparkles.appendChild(sparkle);
        }
        
        // Add sparkle CSS
        if (!document.querySelector('#sparkle-styles')) {
            const style = document.createElement('style');
            style.id = 'sparkle-styles';
            style.textContent = `
                .sparkles {
                    position: absolute;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    pointer-events: none;
                    overflow: hidden;
                }
                
                .sparkle {
                    position: absolute;
                    width: 4px;
                    height: 4px;
                    background: white;
                    border-radius: 50%;
                    animation: sparkleAnimation 1s ease-out forwards;
                }
                
                @keyframes sparkleAnimation {
                    0% {
                        opacity: 0;
                        transform: scale(0) rotate(0deg);
                    }
                    50% {
                        opacity: 1;
                        transform: scale(1) rotate(180deg);
                    }
                    100% {
                        opacity: 0;
                        transform: scale(0) rotate(360deg);
                    }
                }
            `;
            document.head.appendChild(style);
        }
        
        // Remove sparkles after animation
        setTimeout(() => {
            sparkles.remove();
        }, 1000);
    }
    
    // Enhanced form submission with loading state
    function setupFormSubmission() {
        const form = document.getElementById('wiki-creation-form');
        if (form) {
            form.addEventListener('submit', function(e) {
                const createButton = document.getElementById('create-button');
                createButton.textContent = 'Creating Wiki...';
                createButton.classList.add('loading');
                createButton.disabled = true;
                
                // Add loading animation
                const style = document.createElement('style');
                style.textContent = `
                    .gnospedia-create-button.loading {
                        position: relative;
                        color: transparent;
                    }
                    
                    .gnospedia-create-button.loading::after {
                        content: '';
                        position: absolute;
                        width: 20px;
                        height: 20px;
                        top: 50%;
                        left: 50%;
                        margin-left: -10px;
                        margin-top: -10px;
                        border: 2px solid transparent;
                        border-top: 2px solid white;
                        border-radius: 50%;
                        animation: spin 1s linear infinite;
                    }
                    
                    @keyframes spin {
                        0% { transform: rotate(0deg); }
                        100% { transform: rotate(360deg); }
                    }
                `;
                document.head.appendChild(style);
            });
        }
    }
    
    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', function() {
            initializeCreateWiki();
            setupFormSubmission();
        });
    } else {
        initializeCreateWiki();
        setupFormSubmission();
    }
    
    // Add some Easter eggs for fun
    let konamiCode = [];
    const konamiSequence = [38, 38, 40, 40, 37, 39, 37, 39, 66, 65]; // ↑↑↓↓←→←→BA
    
    document.addEventListener('keydown', function(e) {
        konamiCode.push(e.keyCode);
        if (konamiCode.length > konamiSequence.length) {
            konamiCode.shift();
        }
        
        if (JSON.stringify(konamiCode) === JSON.stringify(konamiSequence)) {
            // Easter egg: Add rainbow animation to the page
            document.body.style.animation = 'rainbow 2s linear infinite';
            const style = document.createElement('style');
            style.textContent = `
                @keyframes rainbow {
                    0% { filter: hue-rotate(0deg); }
                    100% { filter: hue-rotate(360deg); }
                }
            `;
            document.head.appendChild(style);
            
            setTimeout(() => {
                document.body.style.animation = '';
            }, 5000);
        }
    });
    
})();
